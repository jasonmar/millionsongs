package songs

object Fields {

  val analysis_sample_rate = "analysis_sample_rate" //	float	//sample rate of the audio used
  val artist_7digitalid = "artist_7digitalid" //	int	//ID from 7digital.com or -1
  val artist_familiarity = "artist_familiarity" //	float	//algorithmic estimation
  val artist_hotttnesss = "artist_hotttnesss" //	float	//algorithmic estimation
  val artist_id = "artist_id" //	string	//Echo Nest ID
  val artist_latitude = "artist_latitude" //	float	//latitude
  val artist_location = "artist_location" //	string	//location name
  val artist_longitude = "artist_longitude" //	float	//longitude
  val artist_mbid = "artist_mbid" //	string	//ID from musicbrainz.org
  val artist_mbtags = "artist_mbtags" //	array string	//tags from musicbrainz.org
  val idx_artist_mbtags = "idx_artist_mbtags" //	array string	//tags from musicbrainz.org
  val artist_mbtags_count = "artist_mbtags_count" // count	array int	//tag counts for musicbrainz tags
  val artist_name = "artist_name" //	string	//artist name
  val artist_playmeid = "artist_playmeid" //	int	//ID from playme.com, or -1
  val artist_terms = "artist_terms" //	array string	//Echo Nest tags
  val idx_artist_terms = "idx_artist_terms" //	array string	//Echo Nest tags
  val artist_terms_freq = "artist_terms_freq" // 	array float	//Echo Nest tags freqs
  val artist_terms_weight = "artist_terms_weight" // 	array float	//Echo Nest tags weight
  val audio_md5 = "audio_md5" //	string	//audio hash code
  val bars_confidence = "bars_confidence" //	array float	//confidence measure
  val idx_bars_confidence = "idx_bars_confidence" //	array float	//confidence measure
  val bars_start = "bars_start" //	array float	//beginning of bars, usually on a beat
  val idx_bars_start = "idx_bars_start" //	array float	//beginning of bars, usually on a beat
  val beats_confidence = "beats_confidence" //	array float	//confidence measure
  val idx_beats_confidence = "idx_beats_confidence" //	array float	//confidence measure
  val beats_start = "beats_start" //	array float	//result of beat tracking
  val idx_beats_start = "idx_beats_start" //	array float	//result of beat tracking
  val danceability = "danceability" //	float	//algorithmic estimation
  val duration = "duration" //	float	//in seconds
  val end_of_fade_in = "end_of_fade_in" //	float	//seconds at the beginning of the song
  val energy = "energy" //	float	//energy from listener point of view
  val key = "key" //	int	//key the song is in
  val key_confidence = "key_confidence" //	float	//confidence measure
  val loudness = "loudness" //	float	//overall loudness in dB
  val mode = "mode" //	int	//major or minor
  val mode_confidence = "mode_confidence" //	float	//confidence measure
  val release = "release" //	string	//album name
  val release_7digitalid = "release_7digitalid" //	int	//ID from 7digital.com or -1
  val sections_confidence = "sections_confidence" //	array float	//confidence measure
  val idx_sections_confidence = "idx_sections_confidence" //	array float	//confidence measure
  val sections_start = "sections_start" //	array float	//largest grouping in a song, e.g. verse
  val idx_sections_start = "idx_sections_start" //	array float	//largest grouping in a song, e.g. verse
  val segments_confidence = "segments_confidence" //	array float	//confidence measure
  val idx_segments_confidence = "idx_segments_confidence" //	array float	//confidence measure
  val segments_loudness_max = "segments_loudness_max" //	array float	//max dB value
  val idx_segments_loudness_max = "idx_segments_loudness_max" //	array float	//max dB value
  val segments_loudness_max_time = "segments_loudness_max_time" // array float	//time of max dB value, i.e. end of attack
  val idx_segments_loudness_max_time = "idx_segments_loudness_max_time" // array float	//time of max dB value, i.e. end of attack
  val segments_loudness_start = "segments_loudness_start" // array float	//dB value at onset
  val idx_segments_loudness_start = "idx_segments_loudness_start" // array float	//dB value at onset
  val segments_pitches = "segments_pitches" //	2D array float	//chroma feature, one value per note
  val idx_segments_pitches = "idx_segments_pitches" //	2D array float	//chroma feature, one value per note
  val segments_start = "segments_start" //	array float	//musical events, ~ note onsets
  val idx_segments_start = "idx_segments_start" //	array float	//musical events, ~ note onsets
  val segments_timbre = "segments_timbre" //	2D array float	//texture features (MFCC+PCA-like)
  val idx_segments_timbre = "idx_segments_timbre" //	2D array float	//texture features (MFCC+PCA-like)
  val similar_artists = "similar_artists" //	array string	//Echo Nest artist IDs (sim. algo. unpublished)
  val idx_similar_artists = "idx_similar_artists" //	array string	//Echo Nest artist IDs (sim. algo. unpublished)
  val song_hotttnesss = "song_hotttnesss" //	float	//algorithmic estimation
  val song_id = "song_id" //	string	//Echo Nest song ID
  val start_of_fade_out = "start_of_fade_out" //	float	//time in sec
  val tatums_confidence = "tatums_confidence" //	array float	//confidence measure
  val idx_tatums_confidence = "idx_tatums_confidence" //	array float	//confidence measure
  val tatums_start = "tatums_start" //	array float	//smallest rythmic element
  val idx_tatums_start = "idx_tatums_start" //	array float	//smallest rythmic element
  val tempo = "tempo" //	float	//estimated tempo in BPM
  val time_signature = "time_signature" //	int	//estimate of number of beats per bar, e.g. 4
  val time_signature_confidence = "time_signature_confidence" // 	float	//confidence measure
  val title = "title" //	string	//song title
  val track_id = "track_id" //	string	//Echo Nest track ID
  val track_7digitalid = "track_7digitalid" //	int	//ID from 7digital.com or -1
  val year = "year" //	int	//song release year from MusicBrainz or 0

}
